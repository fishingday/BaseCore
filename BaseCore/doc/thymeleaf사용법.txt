0. 참고 차료 출처 : https://jddng.tistory.com/search/thymeleaf

1. 선언 
  - thymeleaf : xmlns:th="http://www.thymeleaf.org"
    
2. thymeleaf 기본 문법
  - @{ URL 링크 } - URL 링크 표현식
    URL 링크 표현식을 사용하면 서블릿 컨텍스트가 자동으로 포함이 된다.
    ex1) th:href="@{/css/bootstrap.min.css}"
         th:href="@{/{itemId}/edit(itemId=${item.id})}"
    ex2)
         th:href="@{/basic/items/{itemId}(itemId=${item.id}, query='test')}"
    ex3) 리터럴 대체 문법을 사용해서 더 간단히 할 수 있다.
         th:href="@{|/basic/items/${item.id}|}"
    ex4) @{/hello/{param1}(param1=${param1}, param2=${param2})}
         ->  /hello/data1?param2=data2
		
  - | 리터럴 | - 리터럴 대체
    타임리프에서 문자와 표현식 등은 분리되어 있기 때문에 더해서 사용해야 한다.
	
    ex1) th:text="|Hi ${user.name}!|"
      (= th:text="'Hi '+${user.name}+'!'"
	ex2)
      <span th:text="'welcome to our application, ' + ${user.name} + '!' ">
      <span th:text="|welcome to our application, ${user.name}!|">
    ex3)
         th:onclick="'location.href=' + '\'' + @{/basic/items/add} + '\''"
         th:onclick="|location.href='@{/basic/items/add}'|" 
	 
  - ${ 변수명 } - 변수 표현식
    모델에 포함된 값이나, 타임리프 변수로 선언한 값을 조회할 수 있다.
	프로퍼티 접근법을 사용 ( item.getPrice() -> item.price )
    ex1) th:text=${user.name}
	ex2) <td th:text="${item.price}">10000</td> ( 10000 대신 item.price 값이 들어간다. )
  
  - 반복 출력 : th:each
    ex ) <tr th:each="item: ${items}">
           <td th:text="${item.price}">100</td>
         </tr>
		 
  - 선택 변수 : *{ ... }
    ex) <tr th:object="${items}">
          <td th:text="*{price}">100</td>
        </tr>
		
  - #{ 변수명 } - 외부 자원 변수 표현식
    메시지, properties와 같은 외부 자원의 데이터를 조회
	ex) th:text="#{member.register}"
	
3. 타임리프(Thymeleaf)가 제공하는 기본 객체들
   <li>request = <span th:text="${#request}"></span></li>
   <li>response = <span th:text="${#response}"></span></li>
   <li>session = <span th:text="${#session}"></span></li>
   <li>servletContext = <span th:text="${#servletContext}"></span></li>
   <li>locale = <span th:text="${#locale}"></span></li>
   
4. 타임리프(Thymeleaf)가 제공하는 편의 객체들
   <li>Request Parameter = <span th:text="${param.paramData}"></span></li>
   <li>session = <span th:text="${session.sessionData}"></span></li>
   <li>spring bean = <span th:text="${@helloBean.hello('Spring!')}"></span></li>
   ※ ${@helloBean.hello('Spring!')}는 빈으로 등록된 HelloBean에 직접 접근해 hello 메서드를 호출한 것이다.
   
5. 타임리프(Thymeleaf) 기본 기능
   - th:text, [[....]]
   기본적인 HTML 태그의 속성은 타임리프가 사용할 수 있다. HTML 태그 속성 앞에 th: 만 붙여주면 타임리프를 사용할 수 있으며 동적 HTML으로 렌더링 할 때 th:속성으로 화면을 구성해 준다.
   HTML 태그의 속성이 아닌 HTML 콘텐츠 영역안에서 직접 데이터를 출력하는 방법은 [[...]] 사용하면 된다.
   ex ) <li>th:text 사용 <span th:text="${data}"></span></li>
        <li>컨텐츠 안에서 직접 출력하기 = [[${data}]]</li>

   - th:utext, [(...)]
   웹 브라우저는 기본적으로 HTML에서 사용하는 문자와 화면에 출력하는 문자를 구별하기 위해 이스케이프를 사용한다. HTML에서 사용하는 문자( <, >, 등....)는 타임리프에서 자동으로 이스케이프 처리를 해주는데 이스케이프 처리를 원하지 않을 때 th:utext, [(...)]을 사용한다.
   ex ) <li>th:text = <span th:text="${data}"></span></li>
        <li>th:utext = <span th:utext="${data}"></span></li>

        <li>[[${data}]]</li> ==> <li>&lt;b&gt;Hello&lt;/b&gt;</li>
        <li>[(${data})]</li> ==> <li><b>Hello</b></li>
		
6. 변수 표현식(SpringEL)
   - Object
     <li>${user.username} = <span th:text="${user.username}"></span></li>
     <li>${user['username']} = <span th:text="${user['username']}"></span></li>
     <li>${user.getUsername()} = <span th:text="${user.getUsername()}"></span></li>
		
   - List
     <li>${users[0].username} = <span th:text="${users[0].username}"></span></li>
     <li>${users[0]['username']} = <span th:text="${users[0]['username']}"></span></li>
     <li>${users[0].getUsername()} = <span th:text="${users[0].getUsername()}"></span></li>

   - Map
     <li>${userMap['userA'].username} = <span th:text="${userMap['userA'].username}"></span></li>
     <li>${userMap['userA']['username']} = <span th:text="${userMap['userA']['username']}"></span></li>
     <li>${userMap['userA'].getUsername()} = <span th:text="${userMap['userA'].getUsername()}"></span></li>
	 
7. 지역 변수 
   <h1>지역 변수 - (th:with)</h1>
   <div th:with="name='hello Spring'">
       <p>타임리프의 <span th:text="${name}"></span></p>
   </div>
   
8. 타임리프(Thymeleaf) 유틸리티 객체(문자, 숫자, 날짜, URI)
   - temporals 
   <li>default = <span th:text="${localDateTime}"></span></li>
   <li>yyyy-MM-dd HH:mm:ss = <span th:text="${#temporals.format(localDateTime,'yyyy-MM-dd HH:mm:ss')}"></span></li>
   
   <li>${#temporals.day(localDateTime)} = <span th:text="${#temporals.day(localDateTime)}"></span></li>
   <li>${#temporals.month(localDateTime)} = <span th:text="${#temporals.month(localDateTime)}"></span></li>
   <li>${#temporals.monthName(localDateTime)} = <span th:text="${#temporals.monthName(localDateTime)}"></span></li>
   <li>${#temporals.monthNameShort(localDateTime)} = <span th:text="${#temporals.monthNameShort(localDateTime)}"></span></li>
   <li>${#temporals.year(localDateTime)} = <span th:text="${#temporals.year(localDateTime)}"></span></li>
   <li>${#temporals.dayOfWeek(localDateTime)} = <span th:text="${#temporals.dayOfWeek(localDateTime)}"></span></li>
   <li>${#temporals.dayOfWeekName(localDateTime)} = <span th:text="${#temporals.dayOfWeekName(localDateTime)}"></span></li>
   <li>${#temporals.dayOfWeekNameShort(localDateTime)} = <span th:text="${#temporals.dayOfWeekNameShort(localDateTime)}"></span></li>
   <li>${#temporals.hour(localDateTime)} = <span th:text="${#temporals.hour(localDateTime)}"></span></li>
   <li>${#temporals.minute(localDateTime)} = <span th:text="${#temporals.minute(localDateTime)}"></span></li>
   <li>${#temporals.second(localDateTime)} = <span th:text="${#temporals.second(localDateTime)}"></span></li>
   <li>${#temporals.nanosecond(localDateTime)} = <span th:text="${#temporals.nanosecond(localDateTime)}"></span></li>
   
9. Collects
<tr th:each="user, userStat : ${users}">
    <td>
        index = <span th:text="${userStat.index}"></span>
        count = <span th:text="${userStat.count}"></span>
        size = <span th:text="${userStat.size}"></span>
        even? = <span th:text="${userStat.even}"></span>
        odd? = <span th:text="${userStat.odd}"></span>
        first? = <span th:text="${userStat.first}"></span>
        last? = <span th:text="${userStat.last}"></span>
        current = <span th:text="${userStat.current}"></span>
    </td>
</tr>

10. 타임리프(Thymeleaf) 자바스크립트 인라인
	<script th:inline="javascript">
		var username = [[${user.username}]];
		var age = [[${user.age}]];
		//자바스크립트 내추럴 템플릿
		var username2 = /*[[${user.username}]]*/ "test username";
		//객체
		var user = [[${user}]];
	</script>
	
	자바스크립트 인라인은 each를 지원한다.
	<script th:inline="javascript">
		 [# th:each="user, stat : ${users}"]
		 var user[[${stat.count}]] = [[${user}]];
		 [/]
	</script>
	
11. 조건식과 Elvis 연산자
  - Elvis 연산자는 조건식의 편의 버전이다.
    <!-- 조건식 -->
    <li>(10 % 2 == 0)? '짝수':'홀수' = <span th:text="(10 % 2 == 0)? '짝수':'홀수'"></span></li>

    <!- Elvis 연산자 -->
    <li>${data}?: '데이터가 없습니다.' = <span th:text="${data}?: '데이터가 없습니다.'"></span></li>
    <li>${nullData}?: '데이터가 없습니다.' = <span th:text="${nullData}?: '데이터가 없습니다.'"></span></li>
	
  - No-Operation ( _ ) : _ 인 경우 조건에 따라 마치 타임리프가 실행되지 않는 것처럼 동작한다
    <li>${data}?: _ = <span th:text="${data}?: _">데이터가 없습니다.</span></li>
    <li>${nullData}?: _ = <span th:text="${nullData}?: _">데이터가 없습니다.</span></li>
	
12. if, unless
   해당 조건이 맞지 않으면 태그 자체를 렌더링하지 않는다.
   if : 조건이 참일 경우 렌더링
   unless : 조건이 거짓일 경우 렌더링
   
   <span th:text="'미성년자'" th:if="${user.age lt 20}"></span>
   <span th:text="'미성년자'" th:unless="${user.age ge 20}"></span>
   
13. switch
   조건에 맞는 case를 렌더링
   만족하는 조건이 없을 때  *  이 렌더링 된다.
   
   <td th:switch="${user.age}">
     <span th:case="10">10살</span>
     <span th:case="20">20살</span>
     <span th:case="*">기타</span>
   </td>
   
14. 타임리프(Thymeleaf) 블록

   <th:block th:each="user : ${users}">
     <div>
       사용자 이름1 <span th:text="${user.username}"></span>
       사용자 나이1 <span th:text="${user.age}"></span>
     </div>
     <div>
       요약 <span th:text="${user.username} + ' / ' + ${user.age}"></span>
     </div>
   </th:block>
   
15. 타임리프(Thymeleaf) 템플릿 조각
   - th:insert="~{ [ 템플릿 조각 경로 ] :: 조각명}"
     insert는 현재 태그를 유지하면서 템플릿 조각을 가져오는 방법
     ex) <div th:insert="~{fragment/footer :: footer}"></div>
   - th:replace="~{ [ 템플릿 조각 경로 ] :: 조각명}"
     replace는 말 그대로 '대체'하는 방법이다. 현재 태그를 템플릿 조각에 있는 태그로 대체하는 방법
	 ex) <div th:replace="~{fragment/footer :: footer}"></div>
   - th:replace="~{ [ 템플릿 조각 경로 ] :: 조각명 ('파라미터1', '파라미터2', ...)}
     템플릿 조각은 파라미터를 전달하여 동적으로 렌더링을 할 수 있다.
	 <div th:replace="~{fragment/footer :: footerParam ('데이터1', '데이터2')}"></div>
	 
16. 스프링에서 제공하는 검증(Validation) 방법 : https://jddng.tistory.com/258
    public String addItemV1(@ModelAttribute Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes, Model model) {​
    ....
	if(!StringUtils.hasText(item.getItemName())){
		bindingResult.addError(new FieldError("item", "itemName", "상품 이름은 필수 입니다."));
	}
	if (item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
		bindingResult.addError(new FieldError("item", "price", "가격은 1,000 ~ 1,000,000 까지 허용합니다."));
	}
	if (item.getQuantity() == null || item.getQuantity() >= 9999) {
		bindingResult.addError(new FieldError("item", "price", "수량은 최대 9,999 까지 허용 합니다."));
	}

	//특정 필드가 아닌 복합 룰 검증
	if (item.getPrice() != null && item.getQuantity() != null) {
		int resultPrice = item.getPrice() * item.getQuantity();
		if (resultPrice < 10000) {
			bindingResult.addError(new ObjectError("item", "가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재값 = " + resultPrice));
		}
	}​
	...
	<div th:if="${#fields.hasGlobalErrors()}">
		<p class="field-error" th:each="err : ${#fields.globalErrors()}" th:text="${err}">글로벌 오류 메시지</p>
	</div>
	
	 ▶  th:errorclass="field-error"
        - 해당 필드에 error가 있을 경우 class 속성에 field-error 추가
        - ex) errors 있는 경우  →    class="field-error field-error"
     ▶ th:errors="*{itemName}"
        - 해당 필드에 error가 있을 경우 error message 출력
        - th:if="${errors?.containsKey('itemName')}" th:text="${errors['itemName']}" 와 같다   