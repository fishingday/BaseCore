버전 0.2로 넘어가기 위한 조건


1. 시퀀스 전략
  - 0.1 까지는 sequence 전략 유지.(온전히 개발의 변의성 때문임)
  - 시스템 규모를 생각하면 시퀀스를 사용하는 전략이 적당하지 않음. UUID가 해결 방안임.
  - UUID 사용 시 고려할 사항은 발행 순서가 보장되지 않을 수 있다는 것이며, UUID 생성 전략이 필요함. 
    (time-based-uuid와 sequential-uuid)
  - APP 뿐이 아니라 배치 입력의 경우를 고려해야 한다.
  
2. 프론트 프레임워크 의 선택
  - 이리 굴리고 저리 굴려봐도 Vue.js가 답인 것 같다. 현 시점에서는...
  - 프로젝트를 진행하면서 웹앱으로 포팅해야한다.
  - 관리자용 시스템(데스크탑용)과 사용자용 시스템(휴대폰, 테블릿)을 분리해야 한다.
  
3. 인증/인가방식
  - 관리자용은 세션을 사용하고, 사용자용은 JWT를 사용(개발 중점은 사용자용임)
  - 관리자용은 사용 IP 대역 지정 및 중복 로그인 통제와 2-factor 인증을 통한 보안을 고려해야함.
    . Spring Boot 2.6 or Spring Boot 2.7 기반
    . Redis와 Spring Session을 사용한 세션 공유
    . 프론트로는 Thymeleaf 사용
  - 사용자용은 긴-인증시간과 편리성, scale out의 편의성 등을 고려하여 JWT 사용 
    . 클라우드를 통한 scale out 기능에 대비
    . Vue.js 기반의 웹앱 형태로 휴대폰에 최적화 되어야함.
    . 주 사용자는 학부모, 학생, 학원관리자 임.
    . Spring Boot 3.x 으로 진행
    
4. 추가되어야 하는 기능
  - 트로피 기능 (스트라바를 참고할 것)
  - 경쟁자 비교 (익명 통계)
    . 형제 뿐 아니라 또래, 또는 동일 학년 성취도 비교
  - 학원 관리자 기능 

